<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="8" failed="2" total="76" passed="66">
  <reporter-output>
  </reporter-output>
  <suite name="Biocept" duration-ms="835664" started-at="2019-07-24T10:16:01Z" finished-at="2019-07-24T10:29:56Z">
    <groups>
    </groups>
    <test name="CTC-FISH Workflow for Global Cases" duration-ms="442999" started-at="2019-07-24T10:16:01Z" finished-at="2019-07-24T10:23:24Z">
      <class name="biocept.qa.testcases.CTCWorkflow">
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="83" started-at="2019-07-24T15:46:05Z" finished-at="2019-07-24T15:46:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="LIMSLogin()[pri:1, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="LIMSLogin" duration-ms="10814" started-at="2019-07-24T15:46:05Z" description="Verify user is able to login in LIMS portal" finished-at="2019-07-24T15:46:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LIMSLogin -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="404" started-at="2019-07-24T15:46:16Z" finished-at="2019-07-24T15:46:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=LIMSLogin status=SUCCESS method=CTCWorkflow.LIMSLogin()[pri:1, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="18" started-at="2019-07-24T15:46:16Z" finished-at="2019-07-24T15:46:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="dashboard()[pri:2, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="dashboard" duration-ms="28" started-at="2019-07-24T15:46:16Z" description="Verify the total link count on dashboard " depends-on-methods="biocept.qa.testcases.CTCWorkflow.LIMSLogin" finished-at="2019-07-24T15:46:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dashboard -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="73" started-at="2019-07-24T15:46:16Z" finished-at="2019-07-24T15:46:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=dashboard status=SUCCESS method=CTCWorkflow.dashboard()[pri:2, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="10" started-at="2019-07-24T15:46:16Z" finished-at="2019-07-24T15:46:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="PlaceNewOrder()[pri:3, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="PlaceNewOrder" duration-ms="50631" started-at="2019-07-24T15:46:16Z" description="Verify user is able to create a new accession for CTC-FISH" depends-on-methods="biocept.qa.testcases.CTCWorkflow.LIMSLogin" finished-at="2019-07-24T15:47:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PlaceNewOrder -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="109" started-at="2019-07-24T15:47:07Z" finished-at="2019-07-24T15:47:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PlaceNewOrder status=SUCCESS method=CTCWorkflow.PlaceNewOrder()[pri:3, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="6" started-at="2019-07-24T15:47:07Z" finished-at="2019-07-24T15:47:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="PatientNameOnBarcodePage()[pri:4, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="PatientNameOnBarcodePage" duration-ms="16623" started-at="2019-07-24T15:47:07Z" description="Verify patient name on barcode page" depends-on-methods="biocept.qa.testcases.CTCWorkflow.PlaceNewOrder" finished-at="2019-07-24T15:47:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PatientNameOnBarcodePage -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="64" started-at="2019-07-24T15:47:24Z" finished-at="2019-07-24T15:47:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PatientNameOnBarcodePage status=SUCCESS method=CTCWorkflow.PatientNameOnBarcodePage()[pri:4, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="9" started-at="2019-07-24T15:47:24Z" finished-at="2019-07-24T15:47:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="UploadAccessionImagesPageTitle()[pri:5, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="UploadAccessionImagesPageTitle" duration-ms="8099" started-at="2019-07-24T15:47:24Z" description="Verify user is able to upload the CTC/FISH images" depends-on-methods="biocept.qa.testcases.CTCWorkflow.PlaceNewOrder" finished-at="2019-07-24T15:47:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UploadAccessionImagesPageTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="54" started-at="2019-07-24T15:47:32Z" finished-at="2019-07-24T15:47:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UploadAccessionImagesPageTitle status=SUCCESS method=CTCWorkflow.UploadAccessionImagesPageTitle()[pri:5, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="9" started-at="2019-07-24T15:47:32Z" finished-at="2019-07-24T15:47:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="MyWorklistTitle()[pri:6, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="MyWorklistTitle" duration-ms="8327" started-at="2019-07-24T15:47:32Z" description="Verify user is able to open the My Worklist" depends-on-methods="biocept.qa.testcases.CTCWorkflow.PlaceNewOrder" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MyWorklistTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="67" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MyWorklistTitle status=SUCCESS method=CTCWorkflow.MyWorklistTitle()[pri:6, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="6" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CTC_FISH_SummaryReport()[pri:40, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="CTC_FISH_SummaryReport" duration-ms="2" started-at="2019-07-24T15:47:40Z" description="Verify user is able to download CTC-FISH Summary Report" depends-on-methods="biocept.qa.testcases.CTCWorkflow.PlaceNewOrder" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CTC_FISH_SummaryReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="44" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CTC_FISH_SummaryReport status=SUCCESS method=CTCWorkflow.CTC_FISH_SummaryReport()[pri:40, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="5" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CTC_FISH_ScoreSheet()[pri:41, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="CTC_FISH_ScoreSheet" duration-ms="2" started-at="2019-07-24T15:47:40Z" description="Verify user is able to download CTC-FISH Score Sheet" depends-on-methods="biocept.qa.testcases.CTCWorkflow.PlaceNewOrder" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CTC_FISH_ScoreSheet -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="53" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CTC_FISH_ScoreSheet status=SUCCESS method=CTCWorkflow.CTC_FISH_ScoreSheet()[pri:41, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="7" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CTC_FISH_SampleTraveler()[pri:42, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="CTC_FISH_SampleTraveler" duration-ms="1" started-at="2019-07-24T15:47:40Z" description="Verify user is able to download CTC-FISH Sample Traveler" depends-on-methods="biocept.qa.testcases.CTCWorkflow.PlaceNewOrder" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CTC_FISH_SampleTraveler -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="49" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CTC_FISH_SampleTraveler status=SUCCESS method=CTCWorkflow.CTC_FISH_SampleTraveler()[pri:42, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="6" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="GenerateLongLabel()[pri:43, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="GenerateLongLabel" duration-ms="3" started-at="2019-07-24T15:47:40Z" description="Verify user is able to download Generate Long Label(s)" depends-on-methods="biocept.qa.testcases.CTCWorkflow.PlaceNewOrder" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GenerateLongLabel -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="48" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GenerateLongLabel status=SUCCESS method=CTCWorkflow.GenerateLongLabel()[pri:43, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="9" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="GenerateSmallLabel()[pri:44, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="GenerateSmallLabel" duration-ms="2" started-at="2019-07-24T15:47:40Z" description="Verify user is able to download Generate Small Label" depends-on-methods="biocept.qa.testcases.CTCWorkflow.PlaceNewOrder" finished-at="2019-07-24T15:47:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GenerateSmallLabel -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="49" started-at="2019-07-24T15:47:40Z" finished-at="2019-07-24T15:47:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GenerateSmallLabel status=SUCCESS method=CTCWorkflow.GenerateSmallLabel()[pri:44, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="5" started-at="2019-07-24T15:47:41Z" finished-at="2019-07-24T15:47:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="GenerateMolecularLabel()[pri:45, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="GenerateMolecularLabel" duration-ms="1" started-at="2019-07-24T15:47:41Z" description="Verify user is able to download Generate Molecular Label" depends-on-methods="biocept.qa.testcases.CTCWorkflow.PlaceNewOrder" finished-at="2019-07-24T15:47:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GenerateMolecularLabel -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="50" started-at="2019-07-24T15:47:41Z" finished-at="2019-07-24T15:47:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GenerateMolecularLabel status=SUCCESS method=CTCWorkflow.GenerateMolecularLabel()[pri:45, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="7" started-at="2019-07-24T15:47:41Z" finished-at="2019-07-24T15:47:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="AccesstionType()[pri:7, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="AccesstionType" duration-ms="951" started-at="2019-07-24T15:47:41Z" description="Verify the accession type when user create an accession without selecting Assign Professional Work checkbox" depends-on-methods="biocept.qa.testcases.CTCWorkflow.MyWorklistTitle" finished-at="2019-07-24T15:47:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AccesstionType -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="51" started-at="2019-07-24T15:47:42Z" finished-at="2019-07-24T15:47:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AccesstionType status=SUCCESS method=CTCWorkflow.AccesstionType()[pri:7, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="6" started-at="2019-07-24T15:47:42Z" finished-at="2019-07-24T15:47:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CellCepProcessingActivityTitle()[pri:8, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="CellCepProcessingActivityTitle" duration-ms="5179" started-at="2019-07-24T15:47:42Z" description="Verify user is able to open the Cell Cep Processing Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.MyWorklistTitle" finished-at="2019-07-24T15:47:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CellCepProcessingActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="62" started-at="2019-07-24T15:47:47Z" finished-at="2019-07-24T15:47:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CellCepProcessingActivityTitle status=SUCCESS method=CTCWorkflow.CellCepProcessingActivityTitle()[pri:8, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="5" started-at="2019-07-24T15:47:47Z" finished-at="2019-07-24T15:47:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="DownloadPlasmaCSV()[pri:46, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="DownloadPlasmaCSV" duration-ms="16" started-at="2019-07-24T15:47:47Z" description="Verify the download functionality for PlasmaCSV" depends-on-methods="biocept.qa.testcases.CTCWorkflow.MyWorklistTitle" finished-at="2019-07-24T15:47:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DownloadPlasmaCSV -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="34" started-at="2019-07-24T15:47:47Z" finished-at="2019-07-24T15:47:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DownloadPlasmaCSV status=SUCCESS method=CTCWorkflow.DownloadPlasmaCSV()[pri:46, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:47:47Z" finished-at="2019-07-24T15:47:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CellCepProcessing()[pri:9, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="CellCepProcessing" duration-ms="6653" started-at="2019-07-24T15:47:47Z" description="Verify user is able to complete the Cell Cep Processing Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.CellCepProcessingActivityTitle" finished-at="2019-07-24T15:47:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CellCepProcessing -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="63" started-at="2019-07-24T15:47:54Z" finished-at="2019-07-24T15:47:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CellCepProcessing status=SUCCESS method=CTCWorkflow.CellCepProcessing()[pri:9, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:47:54Z" finished-at="2019-07-24T15:47:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CellSepBatchingActivityTitle()[pri:10, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="CellSepBatchingActivityTitle" duration-ms="7442" started-at="2019-07-24T15:47:54Z" description="Verify user is able to open the Cell Cep Batching Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.CellCepProcessing" finished-at="2019-07-24T15:48:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CellSepBatchingActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="76" started-at="2019-07-24T15:48:01Z" finished-at="2019-07-24T15:48:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CellSepBatchingActivityTitle status=SUCCESS method=CTCWorkflow.CellSepBatchingActivityTitle()[pri:10, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="7" started-at="2019-07-24T15:48:01Z" finished-at="2019-07-24T15:48:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CellSepBatching()[pri:11, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="CellSepBatching" duration-ms="6577" started-at="2019-07-24T15:48:01Z" description="Verify user is able to complete the Cell Cep Batching Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.CellSepBatchingActivityTitle" finished-at="2019-07-24T15:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CellSepBatching -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="88" started-at="2019-07-24T15:48:08Z" finished-at="2019-07-24T15:48:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CellSepBatching status=SUCCESS method=CTCWorkflow.CellSepBatching()[pri:11, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="7" started-at="2019-07-24T15:48:08Z" finished-at="2019-07-24T15:48:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="MEMSProcessingActivityTitle()[pri:12, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="MEMSProcessingActivityTitle" duration-ms="6876" started-at="2019-07-24T15:48:08Z" description="Verify user is able to open the Mems Processing Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.CellSepBatching" finished-at="2019-07-24T15:48:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MEMSProcessingActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="75" started-at="2019-07-24T15:48:15Z" finished-at="2019-07-24T15:48:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MEMSProcessingActivityTitle status=SUCCESS method=CTCWorkflow.MEMSProcessingActivityTitle()[pri:12, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:48:15Z" finished-at="2019-07-24T15:48:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="MEMSProcessing()[pri:13, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="MEMSProcessing" duration-ms="5441" started-at="2019-07-24T15:48:15Z" description="Verify user is able to complete the Mems Processing Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.MEMSProcessingActivityTitle" finished-at="2019-07-24T15:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MEMSProcessing -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="130" started-at="2019-07-24T15:48:20Z" finished-at="2019-07-24T15:48:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MEMSProcessing status=SUCCESS method=CTCWorkflow.MEMSProcessing()[pri:13, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="20" started-at="2019-07-24T15:48:20Z" finished-at="2019-07-24T15:48:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="MemsBatchingActivityTitle()[pri:14, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="MemsBatchingActivityTitle" duration-ms="6678" started-at="2019-07-24T15:48:20Z" description="Verify user is able to open the Mems Batching Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.MEMSProcessing" finished-at="2019-07-24T15:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MemsBatchingActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="68" started-at="2019-07-24T15:48:27Z" finished-at="2019-07-24T15:48:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MemsBatchingActivityTitle status=SUCCESS method=CTCWorkflow.MemsBatchingActivityTitle()[pri:14, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="6" started-at="2019-07-24T15:48:27Z" finished-at="2019-07-24T15:48:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="MemsBatching()[pri:15, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="MemsBatching" duration-ms="5815" started-at="2019-07-24T15:48:27Z" description="Verify user is able to complete the Mems Batching Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.MemsBatchingActivityTitle" finished-at="2019-07-24T15:48:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MemsBatching -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="47" started-at="2019-07-24T15:48:33Z" finished-at="2019-07-24T15:48:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MemsBatching status=SUCCESS method=CTCWorkflow.MemsBatching()[pri:15, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="6" started-at="2019-07-24T15:48:33Z" finished-at="2019-07-24T15:48:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="BioviewScanDataActivityTitle()[pri:16, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="BioviewScanDataActivityTitle" duration-ms="6486" started-at="2019-07-24T15:48:33Z" description="Verify user is able to open the Bioview Scan Data Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.MemsBatching" finished-at="2019-07-24T15:48:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BioviewScanDataActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="47" started-at="2019-07-24T15:48:39Z" finished-at="2019-07-24T15:48:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BioviewScanDataActivityTitle status=SUCCESS method=CTCWorkflow.BioviewScanDataActivityTitle()[pri:16, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="12" started-at="2019-07-24T15:48:40Z" finished-at="2019-07-24T15:48:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="BioviewScanData()[pri:17, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="BioviewScanData" duration-ms="6637" started-at="2019-07-24T15:48:40Z" description="Verify user is able to complete the Bioview Scan Data Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.BioviewScanDataActivityTitle" finished-at="2019-07-24T15:48:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BioviewScanData -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="51" started-at="2019-07-24T15:48:46Z" finished-at="2019-07-24T15:48:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BioviewScanData status=SUCCESS method=CTCWorkflow.BioviewScanData()[pri:17, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="7" started-at="2019-07-24T15:48:46Z" finished-at="2019-07-24T15:48:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="EnumerationImageReviewActivityTitle()[pri:18, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="EnumerationImageReviewActivityTitle" duration-ms="7097" started-at="2019-07-24T15:48:46Z" description="Verify user is able to open the Enumeration Image Review Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.BioviewScanData" finished-at="2019-07-24T15:48:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EnumerationImageReviewActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="42" started-at="2019-07-24T15:48:53Z" finished-at="2019-07-24T15:48:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EnumerationImageReviewActivityTitle status=SUCCESS method=CTCWorkflow.EnumerationImageReviewActivityTitle()[pri:18, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:48:53Z" finished-at="2019-07-24T15:48:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="EnumerationImageReview()[pri:19, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="EnumerationImageReview" duration-ms="18605" started-at="2019-07-24T15:48:53Z" description="Verify user is able to complete the Enumeration Image Review Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.EnumerationImageReviewActivityTitle" finished-at="2019-07-24T15:49:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EnumerationImageReview -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="42" started-at="2019-07-24T15:49:12Z" finished-at="2019-07-24T15:49:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EnumerationImageReview status=SUCCESS method=CTCWorkflow.EnumerationImageReview()[pri:19, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="5" started-at="2019-07-24T15:49:12Z" finished-at="2019-07-24T15:49:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CTCICCResultsSummaryActivityTitle()[pri:20, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="CTCICCResultsSummaryActivityTitle" duration-ms="6963" started-at="2019-07-24T15:49:12Z" description="Verify user is able to open the CTC ICC Results Summary Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.EnumerationImageReview" finished-at="2019-07-24T15:49:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CTCICCResultsSummaryActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="40" started-at="2019-07-24T15:49:19Z" finished-at="2019-07-24T15:49:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CTCICCResultsSummaryActivityTitle status=SUCCESS method=CTCWorkflow.CTCICCResultsSummaryActivityTitle()[pri:20, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="6" started-at="2019-07-24T15:49:19Z" finished-at="2019-07-24T15:49:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CTCICCResultsSummary()[pri:21, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="CTCICCResultsSummary" duration-ms="8011" started-at="2019-07-24T15:49:19Z" description="Verify user is able to complete the CTC ICC Results Summary Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.CTCICCResultsSummaryActivityTitle" finished-at="2019-07-24T15:49:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CTCICCResultsSummary -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="49" started-at="2019-07-24T15:49:27Z" finished-at="2019-07-24T15:49:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CTCICCResultsSummary status=SUCCESS method=CTCWorkflow.CTCICCResultsSummary()[pri:21, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:49:27Z" finished-at="2019-07-24T15:49:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="FISHAutobatchedworklistActivityTitle()[pri:22, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="FISHAutobatchedworklistActivityTitle" duration-ms="6430" started-at="2019-07-24T15:49:27Z" description="Verify user is able to open the FISH Auto batched worklist Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.CTCICCResultsSummary" finished-at="2019-07-24T15:49:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FISHAutobatchedworklistActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="46" started-at="2019-07-24T15:49:34Z" finished-at="2019-07-24T15:49:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=FISHAutobatchedworklistActivityTitle status=SUCCESS method=CTCWorkflow.FISHAutobatchedworklistActivityTitle()[pri:22, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:49:34Z" finished-at="2019-07-24T15:49:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="FISHAutobatchedworklist()[pri:23, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="FISHAutobatchedworklist" duration-ms="6662" started-at="2019-07-24T15:49:34Z" description="Verify user is able to complete the FISH Auto batched worklist Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.FISHAutobatchedworklistActivityTitle" finished-at="2019-07-24T15:49:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FISHAutobatchedworklist -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="36" started-at="2019-07-24T15:49:40Z" finished-at="2019-07-24T15:49:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=FISHAutobatchedworklist status=SUCCESS method=CTCWorkflow.FISHAutobatchedworklist()[pri:23, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:49:40Z" finished-at="2019-07-24T15:49:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="FISHReloAnalysisActivityTitle()[pri:24, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="FISHReloAnalysisActivityTitle" duration-ms="7118" started-at="2019-07-24T15:49:40Z" description="Verify user is able to open the FISH Relo Analysis Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.FISHAutobatchedworklist" finished-at="2019-07-24T15:49:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FISHReloAnalysisActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="37" started-at="2019-07-24T15:49:47Z" finished-at="2019-07-24T15:49:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=FISHReloAnalysisActivityTitle status=SUCCESS method=CTCWorkflow.FISHReloAnalysisActivityTitle()[pri:24, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="5" started-at="2019-07-24T15:49:47Z" finished-at="2019-07-24T15:49:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="FISHReloAnalysis()[pri:25, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="FISHReloAnalysis" duration-ms="8594" started-at="2019-07-24T15:49:47Z" description="Verify user is able to complete the FISH Relo Analysis Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.FISHReloAnalysisActivityTitle" finished-at="2019-07-24T15:49:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FISHReloAnalysis -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="34" started-at="2019-07-24T15:49:56Z" finished-at="2019-07-24T15:49:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=FISHReloAnalysis status=SUCCESS method=CTCWorkflow.FISHReloAnalysis()[pri:25, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:49:56Z" finished-at="2019-07-24T15:49:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="FISHResultsSummaryActivityTitle()[pri:26, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="FISHResultsSummaryActivityTitle" duration-ms="8696" started-at="2019-07-24T15:49:56Z" description="Verify user is able to open the FISH Results Summary Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.FISHReloAnalysis" finished-at="2019-07-24T15:50:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FISHResultsSummaryActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="35" started-at="2019-07-24T15:50:05Z" finished-at="2019-07-24T15:50:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=FISHResultsSummaryActivityTitle status=SUCCESS method=CTCWorkflow.FISHResultsSummaryActivityTitle()[pri:26, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:50:05Z" finished-at="2019-07-24T15:50:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="FISHResultsSummary()[pri:27, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="FISHResultsSummary" duration-ms="29617" started-at="2019-07-24T15:50:05Z" description="Verify user is able to complete the FISH Results Summary Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.FISHResultsSummaryActivityTitle" finished-at="2019-07-24T15:50:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FISHResultsSummary -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="42" started-at="2019-07-24T15:50:34Z" finished-at="2019-07-24T15:50:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=FISHResultsSummary status=SUCCESS method=CTCWorkflow.FISHResultsSummary()[pri:27, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="3" started-at="2019-07-24T15:50:34Z" finished-at="2019-07-24T15:50:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="PIActivityTitle()[pri:28, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="PIActivityTitle" duration-ms="7614" started-at="2019-07-24T15:50:34Z" description="Verify user is able to open the TechOnly Professional Interpretation Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.FISHResultsSummary" finished-at="2019-07-24T15:50:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PIActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="40" started-at="2019-07-24T15:50:42Z" finished-at="2019-07-24T15:50:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PIActivityTitle status=SUCCESS method=CTCWorkflow.PIActivityTitle()[pri:28, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="3" started-at="2019-07-24T15:50:42Z" finished-at="2019-07-24T15:50:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TechOnlyProfessionalInterpretation()[pri:29, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="TechOnlyProfessionalInterpretation" duration-ms="6139" started-at="2019-07-24T15:50:42Z" description="Verify user is able to complete the PI Activity" depends-on-methods="biocept.qa.testcases.CTCWorkflow.PIActivityTitle" finished-at="2019-07-24T15:50:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TechOnlyProfessionalInterpretation -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="34" started-at="2019-07-24T15:50:48Z" finished-at="2019-07-24T15:50:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TechOnlyProfessionalInterpretation status=SUCCESS method=CTCWorkflow.TechOnlyProfessionalInterpretation()[pri:29, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="3" started-at="2019-07-24T15:50:48Z" finished-at="2019-07-24T15:50:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="QAReportingWorklistTitle()[pri:30, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="QAReportingWorklistTitle" duration-ms="4600" started-at="2019-07-24T15:50:48Z" description="Verify user is able to open the QA Reporting Worklist" depends-on-methods="biocept.qa.testcases.CTCWorkflow.TechOnlyProfessionalInterpretation" finished-at="2019-07-24T15:50:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QAReportingWorklistTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="36" started-at="2019-07-24T15:50:53Z" finished-at="2019-07-24T15:50:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QAReportingWorklistTitle status=SUCCESS method=CTCWorkflow.QAReportingWorklistTitle()[pri:30, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:50:53Z" finished-at="2019-07-24T15:50:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="QAReportingWorklist()[pri:31, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="QAReportingWorklist" duration-ms="14796" started-at="2019-07-24T15:50:53Z" description="Verify user is able to complete the QA Reporting" depends-on-methods="biocept.qa.testcases.CTCWorkflow.QAReportingWorklistTitle" finished-at="2019-07-24T15:51:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QAReportingWorklist -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="34" started-at="2019-07-24T15:51:08Z" finished-at="2019-07-24T15:51:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=QAReportingWorklist status=SUCCESS method=CTCWorkflow.QAReportingWorklist()[pri:31, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:51:08Z" finished-at="2019-07-24T15:51:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="FishBatchReviewApproveWorklistTitle()[pri:32, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="FishBatchReviewApproveWorklistTitle" duration-ms="4972" started-at="2019-07-24T15:51:08Z" description="Verify user is able to open FISH Batch Review &amp; Approve Worklist" depends-on-methods="biocept.qa.testcases.CTCWorkflow.QAReportingWorklist" finished-at="2019-07-24T15:51:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FishBatchReviewApproveWorklistTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="66" started-at="2019-07-24T15:51:13Z" finished-at="2019-07-24T15:51:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=FishBatchReviewApproveWorklistTitle status=SUCCESS method=CTCWorkflow.FishBatchReviewApproveWorklistTitle()[pri:32, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:51:13Z" finished-at="2019-07-24T15:51:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="FishReportSignoff_Batch()[pri:33, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="FishReportSignoff_Batch" duration-ms="8477" started-at="2019-07-24T15:51:13Z" description="Verify user is able to Signoff the CTC-FISH Report from FISH Batch Review &amp; Approve Worklist" depends-on-methods="biocept.qa.testcases.CTCWorkflow.FishBatchReviewApproveWorklistTitle" finished-at="2019-07-24T15:51:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FishReportSignoff_Batch -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="33" started-at="2019-07-24T15:51:21Z" finished-at="2019-07-24T15:51:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=FishReportSignoff_Batch status=SUCCESS method=CTCWorkflow.FishReportSignoff_Batch()[pri:33, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:51:21Z" finished-at="2019-07-24T15:51:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CompletedWorklist()[pri:34, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="CompletedWorklist" duration-ms="5233" started-at="2019-07-24T15:51:21Z" description="Verify user is able to open the Completed Worklist" depends-on-methods="biocept.qa.testcases.CTCWorkflow.FishReportSignoff_Batch" finished-at="2019-07-24T15:51:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CompletedWorklist -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="34" started-at="2019-07-24T15:51:27Z" finished-at="2019-07-24T15:51:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CompletedWorklist status=SUCCESS method=CTCWorkflow.CompletedWorklist()[pri:34, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="3" started-at="2019-07-24T15:51:27Z" finished-at="2019-07-24T15:51:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ConfirmationPopupOnCompletedWorklist()[pri:35, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="ConfirmationPopupOnCompletedWorklist" duration-ms="3337" started-at="2019-07-24T15:51:27Z" description="Verify the functionality when user tries to reopen the case from completed worklist" depends-on-methods="biocept.qa.testcases.CTCWorkflow.CompletedWorklist" finished-at="2019-07-24T15:51:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ConfirmationPopupOnCompletedWorklist -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="31" started-at="2019-07-24T15:51:30Z" finished-at="2019-07-24T15:51:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ConfirmationPopupOnCompletedWorklist status=SUCCESS method=CTCWorkflow.ConfirmationPopupOnCompletedWorklist()[pri:35, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:51:30Z" finished-at="2019-07-24T15:51:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ActivityTitleAfterReOpen()[pri:36, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="ActivityTitleAfterReOpen" duration-ms="24011" started-at="2019-07-24T15:51:30Z" description="Verify the activity after reopen the case from completed worklist" depends-on-methods="biocept.qa.testcases.CTCWorkflow.ConfirmationPopupOnCompletedWorklist" finished-at="2019-07-24T15:51:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ActivityTitleAfterReOpen -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="43" started-at="2019-07-24T15:51:54Z" finished-at="2019-07-24T15:51:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ActivityTitleAfterReOpen status=SUCCESS method=CTCWorkflow.ActivityTitleAfterReOpen()[pri:36, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="3" started-at="2019-07-24T15:51:54Z" finished-at="2019-07-24T15:51:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="FishReviewApproveTitle()[pri:37, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="FishReviewApproveTitle" duration-ms="5248" started-at="2019-07-24T15:51:54Z" description="Verify user is able to open FISH Review &amp; Approve Worklist" depends-on-methods="biocept.qa.testcases.CTCWorkflow.ActivityTitleAfterReOpen" finished-at="2019-07-24T15:51:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FishReviewApproveTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="29" started-at="2019-07-24T15:51:59Z" finished-at="2019-07-24T15:51:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=FishReviewApproveTitle status=SUCCESS method=CTCWorkflow.FishReviewApproveTitle()[pri:37, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="setup" is-config="true" duration-ms="4" started-at="2019-07-24T15:51:59Z" finished-at="2019-07-24T15:51:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="FAIL" signature="ReportVersionSelectionPopUp()[pri:38, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="ReportVersionSelectionPopUp" duration-ms="82207" started-at="2019-07-24T15:51:59Z" description="Verify the functionality when user tries to signoff the report again" depends-on-methods="biocept.qa.testcases.CTCWorkflow.FishReviewApproveTitle" finished-at="2019-07-24T15:53:22Z">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: h4[id='myModalLabel']' (tried for 40 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: h4[id='myModalLabel']' (tried for 40 second(s) with 500 milliseconds interval)
	at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
	at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
	at biocept.qa.utill.ExplicitWait.waitUntilElementToBeVisible(ExplicitWait.java:35)
	at biocept.qa.pages.FISHReviewAndApproveWorklist.reportVersionSelectionPopup(FISHReviewAndApproveWorklist.java:80)
	at biocept.qa.testcases.CTCWorkflow.ReportVersionSelectionPopUp(CTCWorkflow.java:583)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":"h4[id='myModalLabel']"}
  (Session info: chrome=75.0.3770.142)
  (Driver info: chromedriver=74.0.3729.6 (255758eccf3d244491b8a1317aa76e1ce10d57e9-refs/branch-heads/3729@{#29}),platform=Windows NT 10.0.16299 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:48'
System info: host: 'ANMOLSINGH', ip: '10.60.1.128', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_161'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 74.0.3729.6 (255758eccf3d24..., userDataDir: C:\Users\ANMOL~1.SIN\AppDat...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:56156}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, proxy: Proxy(), rotatable: false, setWindowRect: true, strictFileInteractability: false, takesHeapSnapshot: true, takesScreenshot: true, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unexpectedAlertBehaviour: ignore, unhandledPromptBehavior: ignore, version: 75.0.3770.142, webStorageEnabled: true}
Session ID: 75c9ef874d8f7b9077b324a7f7565d41
*** Element info: {Using=css selector, value=h4[id='myModalLabel']}
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
	at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
	at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
	at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
	at org.openqa.selenium.remote.RemoteWebDriver.findElementByCssSelector(RemoteWebDriver.java:420)
	at org.openqa.selenium.By$ByCssSelector.findElement(By.java:431)
	at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
	at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
	at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
	at com.sun.proxy.$Proxy13.isDisplayed(Unknown Source)
	at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
	at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
	at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
	at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
	at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
	... 27 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ReportVersionSelectionPopUp -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="getResult" is-config="true" duration-ms="732" started-at="2019-07-24T15:53:22Z" finished-at="2019-07-24T15:53:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReportVersionSelectionPopUp status=FAILURE method=CTCWorkflow.ReportVersionSelectionPopUp()[pri:38, instance:biocept.qa.testcases.CTCWorkflow@57536d79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="SKIP" signature="SignoffTheReportForNewVersion()[pri:39, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="SignoffTheReportForNewVersion" duration-ms="0" started-at="2019-07-24T15:53:22Z" description="Verify user is able to create a new version of report" depends-on-methods="biocept.qa.testcases.CTCWorkflow.ReportVersionSelectionPopUp" finished-at="2019-07-24T15:53:22Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method CTCWorkflow.SignoffTheReportForNewVersion()[pri:39, instance:biocept.qa.testcases.CTCWorkflow@57536d79] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method CTCWorkflow.SignoffTheReportForNewVersion()[pri:39, instance:biocept.qa.testcases.CTCWorkflow@57536d79] depends on not successfully finished methods
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1033)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SignoffTheReportForNewVersion -->
        <test-method status="PASS" signature="LogOut()[pri:0, instance:biocept.qa.testcases.CTCWorkflow@57536d79]" name="LogOut" is-config="true" duration-ms="1398" started-at="2019-07-24T15:53:22Z" finished-at="2019-07-24T15:53:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LogOut -->
      </class> <!-- biocept.qa.testcases.CTCWorkflow -->
      <class name="biocept.qa.testcases.BioceptTestBase">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:biocept.qa.testcases.BioceptTestBase@6ddf90b0]" name="beforeTest" is-config="true" duration-ms="4092" started-at="2019-07-24T15:46:01Z" finished-at="2019-07-24T15:46:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
      </class> <!-- biocept.qa.testcases.BioceptTestBase -->
    </test> <!-- CTC-FISH Workflow for Global Cases -->
    <test name="Molecular Workflow" duration-ms="326292" started-at="2019-07-24T10:23:24Z" finished-at="2019-07-24T10:28:50Z">
      <class name="biocept.qa.testcases.MolecularWorkflow">
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="8" started-at="2019-07-24T15:53:24Z" finished-at="2019-07-24T15:53:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="PlaceNewOrderForMolecular()[pri:1, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="PlaceNewOrderForMolecular" duration-ms="54409" started-at="2019-07-24T15:53:24Z" description="Verify user is able to create a new accession for Molecular Test" finished-at="2019-07-24T15:54:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PlaceNewOrderForMolecular -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="43" started-at="2019-07-24T15:54:18Z" finished-at="2019-07-24T15:54:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=PlaceNewOrderForMolecular status=SUCCESS method=MolecularWorkflow.PlaceNewOrderForMolecular()[pri:1, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:54:18Z" finished-at="2019-07-24T15:54:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="UploadMacroFile()[pri:2, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="UploadMacroFile" duration-ms="4560" started-at="2019-07-24T15:54:18Z" description="Verify user is able to open the upload Macro File page" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.PlaceNewOrderForMolecular" finished-at="2019-07-24T15:54:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UploadMacroFile -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="38" started-at="2019-07-24T15:54:23Z" finished-at="2019-07-24T15:54:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UploadMacroFile status=SUCCESS method=MolecularWorkflow.UploadMacroFile()[pri:2, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:54:23Z" finished-at="2019-07-24T15:54:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="NRASResultingActivityTitle()[pri:3, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="NRASResultingActivityTitle" duration-ms="53557" started-at="2019-07-24T15:54:23Z" description="Verify user is able to open the NRAS Molecular Generic Resulting Activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.UploadMacroFile" finished-at="2019-07-24T15:55:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NRASResultingActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="32" started-at="2019-07-24T15:55:16Z" finished-at="2019-07-24T15:55:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NRASResultingActivityTitle status=SUCCESS method=MolecularWorkflow.NRASResultingActivityTitle()[pri:3, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="1" started-at="2019-07-24T15:55:16Z" finished-at="2019-07-24T15:55:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="NRASResultingUpdateResult()[pri:4, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="NRASResultingUpdateResult" duration-ms="4163" started-at="2019-07-24T15:55:16Z" description="Verify user is able to complete the NRAS Molecular Generic Resulting activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.NRASResultingActivityTitle" finished-at="2019-07-24T15:55:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NRASResultingUpdateResult -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="39" started-at="2019-07-24T15:55:21Z" finished-at="2019-07-24T15:55:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NRASResultingUpdateResult status=SUCCESS method=MolecularWorkflow.NRASResultingUpdateResult()[pri:4, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="1" started-at="2019-07-24T15:55:21Z" finished-at="2019-07-24T15:55:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="BRAFResultingActivityTitle()[pri:5, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="BRAFResultingActivityTitle" duration-ms="11060" started-at="2019-07-24T15:55:21Z" description="Verify user is able to open the BRAF Molecular Generic Resulting Activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.NRASResultingUpdateResult" finished-at="2019-07-24T15:55:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BRAFResultingActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="31" started-at="2019-07-24T15:55:32Z" finished-at="2019-07-24T15:55:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BRAFResultingActivityTitle status=SUCCESS method=MolecularWorkflow.BRAFResultingActivityTitle()[pri:5, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:55:32Z" finished-at="2019-07-24T15:55:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="BRAFResultingUpdateResult()[pri:6, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="BRAFResultingUpdateResult" duration-ms="3803" started-at="2019-07-24T15:55:32Z" description="Verify user is able to complete the BRAF Molecular Generic Resulting activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.BRAFResultingActivityTitle" finished-at="2019-07-24T15:55:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BRAFResultingUpdateResult -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="44" started-at="2019-07-24T15:55:35Z" finished-at="2019-07-24T15:55:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BRAFResultingUpdateResult status=SUCCESS method=MolecularWorkflow.BRAFResultingUpdateResult()[pri:6, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="3" started-at="2019-07-24T15:55:36Z" finished-at="2019-07-24T15:55:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="KRASResultingActivityTitle()[pri:7, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="KRASResultingActivityTitle" duration-ms="11620" started-at="2019-07-24T15:55:36Z" description="Verify user is able to open the KRAS Molecular Generic Resulting activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.BRAFResultingUpdateResult" finished-at="2019-07-24T15:55:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- KRASResultingActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="31" started-at="2019-07-24T15:55:47Z" finished-at="2019-07-24T15:55:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=KRASResultingActivityTitle status=SUCCESS method=MolecularWorkflow.KRASResultingActivityTitle()[pri:7, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:55:47Z" finished-at="2019-07-24T15:55:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="KRASResultingUpdateResult()[pri:8, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="KRASResultingUpdateResult" duration-ms="8196" started-at="2019-07-24T15:55:47Z" description="Verify user is able to complete the KRAS Molecular Generic Resulting activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.KRASResultingActivityTitle" finished-at="2019-07-24T15:55:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- KRASResultingUpdateResult -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="30" started-at="2019-07-24T15:55:55Z" finished-at="2019-07-24T15:55:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=KRASResultingUpdateResult status=SUCCESS method=MolecularWorkflow.KRASResultingUpdateResult()[pri:8, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:55:55Z" finished-at="2019-07-24T15:55:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="UploadSequenceImages()[pri:9, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="UploadSequenceImages" duration-ms="16439" started-at="2019-07-24T15:55:55Z" description="Verify user is able to upload the Sequence image" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.KRASResultingUpdateResult" finished-at="2019-07-24T15:56:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UploadSequenceImages -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="36" started-at="2019-07-24T15:56:12Z" finished-at="2019-07-24T15:56:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UploadSequenceImages status=SUCCESS method=MolecularWorkflow.UploadSequenceImages()[pri:9, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:56:12Z" finished-at="2019-07-24T15:56:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="NRASPIActivityTitle()[pri:10, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="NRASPIActivityTitle" duration-ms="9802" started-at="2019-07-24T15:56:12Z" description="Verify user is able to open NRAS Molecular Professional Interpretation activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.UploadSequenceImages" finished-at="2019-07-24T15:56:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NRASPIActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="33" started-at="2019-07-24T15:56:22Z" finished-at="2019-07-24T15:56:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NRASPIActivityTitle status=SUCCESS method=MolecularWorkflow.NRASPIActivityTitle()[pri:10, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:56:22Z" finished-at="2019-07-24T15:56:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="NRASPIActivityResult()[pri:11, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="NRASPIActivityResult" duration-ms="8424" started-at="2019-07-24T15:56:22Z" description="Verify user is able to complete the NRAS Molecular Professional Interpretation activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.NRASPIActivityTitle" finished-at="2019-07-24T15:56:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NRASPIActivityResult -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="46" started-at="2019-07-24T15:56:30Z" finished-at="2019-07-24T15:56:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NRASPIActivityResult status=SUCCESS method=MolecularWorkflow.NRASPIActivityResult()[pri:11, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="3" started-at="2019-07-24T15:56:30Z" finished-at="2019-07-24T15:56:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="NRASReportSignoff()[pri:12, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="NRASReportSignoff" duration-ms="20797" started-at="2019-07-24T15:56:30Z" description="Verify user is able to Signoff the NRAS Test Report from Molecular Review &amp; Approve Worklist" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.NRASPIActivityResult" finished-at="2019-07-24T15:56:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NRASReportSignoff -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="31" started-at="2019-07-24T15:56:51Z" finished-at="2019-07-24T15:56:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NRASReportSignoff status=SUCCESS method=MolecularWorkflow.NRASReportSignoff()[pri:12, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:56:51Z" finished-at="2019-07-24T15:56:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="BRAFSequencingActivityTitle()[pri:13, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="BRAFSequencingActivityTitle" duration-ms="20696" started-at="2019-07-24T15:56:51Z" description="Verify user is able to open BRAF Sequencing activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.NRASReportSignoff" finished-at="2019-07-24T15:57:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BRAFSequencingActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="29" started-at="2019-07-24T15:57:12Z" finished-at="2019-07-24T15:57:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BRAFSequencingActivityTitle status=SUCCESS method=MolecularWorkflow.BRAFSequencingActivityTitle()[pri:13, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:57:12Z" finished-at="2019-07-24T15:57:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="BRAFSequencingActivityResult()[pri:14, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="BRAFSequencingActivityResult" duration-ms="7559" started-at="2019-07-24T15:57:12Z" description="Verify user is able to complete the BRAF Sequencing activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.BRAFSequencingActivityTitle" finished-at="2019-07-24T15:57:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BRAFSequencingActivityResult -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="36" started-at="2019-07-24T15:57:19Z" finished-at="2019-07-24T15:57:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BRAFSequencingActivityResult status=SUCCESS method=MolecularWorkflow.BRAFSequencingActivityResult()[pri:14, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:57:19Z" finished-at="2019-07-24T15:57:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="KRASSequencingActivityTitle()[pri:15, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="KRASSequencingActivityTitle" duration-ms="11187" started-at="2019-07-24T15:57:19Z" description="Verify user is able to open KRAS Sequencing activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.BRAFSequencingActivityResult" finished-at="2019-07-24T15:57:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- KRASSequencingActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="34" started-at="2019-07-24T15:57:31Z" finished-at="2019-07-24T15:57:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=KRASSequencingActivityTitle status=SUCCESS method=MolecularWorkflow.KRASSequencingActivityTitle()[pri:15, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:57:31Z" finished-at="2019-07-24T15:57:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="KRASSequencingActivityResult()[pri:16, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="KRASSequencingActivityResult" duration-ms="7032" started-at="2019-07-24T15:57:31Z" description="Verify user is able to complete the KRAS Sequencing activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.KRASSequencingActivityTitle" finished-at="2019-07-24T15:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- KRASSequencingActivityResult -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="34" started-at="2019-07-24T15:57:38Z" finished-at="2019-07-24T15:57:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=KRASSequencingActivityResult status=SUCCESS method=MolecularWorkflow.KRASSequencingActivityResult()[pri:16, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:57:38Z" finished-at="2019-07-24T15:57:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="BRAFPIActivityTitle()[pri:17, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="BRAFPIActivityTitle" duration-ms="6889" started-at="2019-07-24T15:57:38Z" description="Verify user is able to open BRAF Molecular Professional Interpretation activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.KRASSequencingActivityResult" finished-at="2019-07-24T15:57:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BRAFPIActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="36" started-at="2019-07-24T15:57:45Z" finished-at="2019-07-24T15:57:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BRAFPIActivityTitle status=SUCCESS method=MolecularWorkflow.BRAFPIActivityTitle()[pri:17, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:57:45Z" finished-at="2019-07-24T15:57:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="BRAFPIActivityResult()[pri:18, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="BRAFPIActivityResult" duration-ms="6714" started-at="2019-07-24T15:57:45Z" description="Verify user is able to complete the BRAF Molecular Professional Interpretation activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.BRAFPIActivityTitle" finished-at="2019-07-24T15:57:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BRAFPIActivityResult -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="47" started-at="2019-07-24T15:57:51Z" finished-at="2019-07-24T15:57:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BRAFPIActivityResult status=SUCCESS method=MolecularWorkflow.BRAFPIActivityResult()[pri:18, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="3" started-at="2019-07-24T15:57:51Z" finished-at="2019-07-24T15:57:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="BRAFReportSignoff()[pri:19, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="BRAFReportSignoff" duration-ms="22362" started-at="2019-07-24T15:57:51Z" description="Verify user is able to Signoff the BRAF Test Report from Molecular Review &amp; Approve Worklist" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.BRAFPIActivityResult" finished-at="2019-07-24T15:58:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BRAFReportSignoff -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="34" started-at="2019-07-24T15:58:14Z" finished-at="2019-07-24T15:58:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BRAFReportSignoff status=SUCCESS method=MolecularWorkflow.BRAFReportSignoff()[pri:19, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="3" started-at="2019-07-24T15:58:14Z" finished-at="2019-07-24T15:58:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="KRASPIActivityTitle()[pri:20, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="KRASPIActivityTitle" duration-ms="4897" started-at="2019-07-24T15:58:14Z" description="Verify user is able to open KRAS Molecular Professional Interpretation activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.BRAFReportSignoff" finished-at="2019-07-24T15:58:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- KRASPIActivityTitle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="33" started-at="2019-07-24T15:58:19Z" finished-at="2019-07-24T15:58:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=KRASPIActivityTitle status=SUCCESS method=MolecularWorkflow.KRASPIActivityTitle()[pri:20, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:58:19Z" finished-at="2019-07-24T15:58:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="KRASPIActivityResult()[pri:21, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="KRASPIActivityResult" duration-ms="7916" started-at="2019-07-24T15:58:19Z" description="Verify user is able to complete the KRAS Molecular Professional Interpretation activity" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.KRASPIActivityTitle" finished-at="2019-07-24T15:58:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- KRASPIActivityResult -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="41" started-at="2019-07-24T15:58:27Z" finished-at="2019-07-24T15:58:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=KRASPIActivityResult status=SUCCESS method=MolecularWorkflow.KRASPIActivityResult()[pri:21, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="setup" is-config="true" duration-ms="2" started-at="2019-07-24T15:58:27Z" finished-at="2019-07-24T15:58:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="KRASReportSignoff()[pri:22, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="KRASReportSignoff" duration-ms="21591" started-at="2019-07-24T15:58:27Z" description="Verify user is able to Signoff the KRAS Test Report from Molecular Review &amp; Approve Worklist" depends-on-methods="biocept.qa.testcases.MolecularWorkflow.KRASPIActivityResult" finished-at="2019-07-24T15:58:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- KRASReportSignoff -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="getResult" is-config="true" duration-ms="35" started-at="2019-07-24T15:58:48Z" finished-at="2019-07-24T15:58:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=KRASReportSignoff status=SUCCESS method=MolecularWorkflow.KRASReportSignoff()[pri:22, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="LogOut()[pri:0, instance:biocept.qa.testcases.MolecularWorkflow@49fc609f]" name="LogOut" is-config="true" duration-ms="1756" started-at="2019-07-24T15:58:48Z" finished-at="2019-07-24T15:58:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LogOut -->
      </class> <!-- biocept.qa.testcases.MolecularWorkflow -->
    </test> <!-- Molecular Workflow -->
    <test name="CTC-FISH Workflow for Tech Cases" duration-ms="66279" started-at="2019-07-24T10:28:50Z" finished-at="2019-07-24T10:29:56Z">
      <class name="biocept.qa.testcases.CTC_FISHTechOnlyWorkflow">
        <test-method status="PASS" signature="setup()[pri:0, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="setup" is-config="true" duration-ms="7" started-at="2019-07-24T15:58:50Z" finished-at="2019-07-24T15:58:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="FAIL" signature="AccesstionType()[pri:1, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="AccesstionType" duration-ms="45441" started-at="2019-07-24T15:58:50Z" description="Verify the accession type when user create an accession without selecting Assign Professional Work checkbox" finished-at="2019-07-24T15:59:36Z">
          <exception class="org.openqa.selenium.ElementClickInterceptedException">
            <message>
              <![CDATA[element click intercepted: Element <button type="button" class="pad3 btn btn-info btn-xs mb5" data-bind="click: $root.SetupAssignProfessionalWork" title="Assign Professional Work To Biocept">...</button> is not clickable at point (1403, 367). Other element would receive the click: <div class="modal-backdrop fade in" style="height: 706px;"></div>
  (Session info: chrome=75.0.3770.142)
  (Driver info: chromedriver=74.0.3729.6 (255758eccf3d244491b8a1317aa76e1ce10d57e9-refs/branch-heads/3729@{#29}),platform=Windows NT 10.0.16299 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:48'
System info: host: 'ANMOLSINGH', ip: '10.60.1.128', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_161'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 74.0.3729.6 (255758eccf3d24..., userDataDir: C:\Users\ANMOL~1.SIN\AppDat...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:56156}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, proxy: Proxy(), rotatable: false, setWindowRect: true, strictFileInteractability: false, takesHeapSnapshot: true, takesScreenshot: true, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unexpectedAlertBehaviour: ignore, unhandledPromptBehavior: ignore, version: 75.0.3770.142, webStorageEnabled: true}
Session ID: 75c9ef874d8f7b9077b324a7f7565d41]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.ElementClickInterceptedException: element click intercepted: Element <button type="button" class="pad3 btn btn-info btn-xs mb5" data-bind="click: $root.SetupAssignProfessionalWork" title="Assign Professional Work To Biocept">...</button> is not clickable at point (1403, 367). Other element would receive the click: <div class="modal-backdrop fade in" style="height: 706px;"></div>
  (Session info: chrome=75.0.3770.142)
  (Driver info: chromedriver=74.0.3729.6 (255758eccf3d244491b8a1317aa76e1ce10d57e9-refs/branch-heads/3729@{#29}),platform=Windows NT 10.0.16299 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:48'
System info: host: 'ANMOLSINGH', ip: '10.60.1.128', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_161'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 74.0.3729.6 (255758eccf3d24..., userDataDir: C:\Users\ANMOL~1.SIN\AppDat...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:56156}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, proxy: Proxy(), rotatable: false, setWindowRect: true, strictFileInteractability: false, takesHeapSnapshot: true, takesScreenshot: true, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unexpectedAlertBehaviour: ignore, unhandledPromptBehavior: ignore, version: 75.0.3770.142, webStorageEnabled: true}
Session ID: 75c9ef874d8f7b9077b324a7f7565d41
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
	at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
	at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
	at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
	at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:84)
	at sun.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:51)
	at com.sun.proxy.$Proxy13.click(Unknown Source)
	at biocept.qa.pages.Accession.assignProfessionalWork(Accession.java:300)
	at biocept.qa.testcases.CTC_FISHTechOnlyWorkflow.AccesstionType(CTC_FISHTechOnlyWorkflow.java:121)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.ElementClickInterceptedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AccesstionType -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="getResult" is-config="true" duration-ms="790" started-at="2019-07-24T15:59:36Z" finished-at="2019-07-24T15:59:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AccesstionType status=FAILURE method=CTC_FISHTechOnlyWorkflow.AccesstionType()[pri:1, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="SKIP" signature="ConfirmationOnTechOnlyPI()[pri:3, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="ConfirmationOnTechOnlyPI" duration-ms="0" started-at="2019-07-24T15:59:36Z" description="Verify the confirmation message when user clicks on QC complete button" depends-on-methods="biocept.qa.testcases.CTC_FISHTechOnlyWorkflow.QC_CompleteButtonOnProfessionalInterpretation" finished-at="2019-07-24T15:59:36Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method CTC_FISHTechOnlyWorkflow.ConfirmationOnTechOnlyPI()[pri:3, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method CTC_FISHTechOnlyWorkflow.ConfirmationOnTechOnlyPI()[pri:3, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1033)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ConfirmationOnTechOnlyPI -->
        <test-method status="SKIP" signature="QC_CompleteButtonOnProfessionalInterpretation()[pri:2, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="QC_CompleteButtonOnProfessionalInterpretation" duration-ms="0" started-at="2019-07-24T15:59:36Z" description="Verify the QC CompleteButton button on Professional Interpretation page" depends-on-methods="biocept.qa.testcases.CTC_FISHTechOnlyWorkflow.AccesstionType" finished-at="2019-07-24T15:59:36Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method CTC_FISHTechOnlyWorkflow.QC_CompleteButtonOnProfessionalInterpretation()[pri:2, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method CTC_FISHTechOnlyWorkflow.QC_CompleteButtonOnProfessionalInterpretation()[pri:2, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1033)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QC_CompleteButtonOnProfessionalInterpretation -->
        <test-method status="SKIP" signature="QCComplete()[pri:4, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="QCComplete" duration-ms="0" started-at="2019-07-24T15:59:36Z" description="Verify user is able to QC Complete the PI Activity" depends-on-methods="biocept.qa.testcases.CTC_FISHTechOnlyWorkflow.ConfirmationOnTechOnlyPI" finished-at="2019-07-24T15:59:36Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method CTC_FISHTechOnlyWorkflow.QCComplete()[pri:4, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method CTC_FISHTechOnlyWorkflow.QCComplete()[pri:4, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1033)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- QCComplete -->
        <test-method status="SKIP" signature="PhysicianPortalLogin()[pri:5, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="PhysicianPortalLogin" duration-ms="0" started-at="2019-07-24T15:59:36Z" description="Verify user is able to login in Physician Portal" depends-on-methods="biocept.qa.testcases.CTC_FISHTechOnlyWorkflow.QCComplete" finished-at="2019-07-24T15:59:36Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method CTC_FISHTechOnlyWorkflow.PhysicianPortalLogin()[pri:5, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method CTC_FISHTechOnlyWorkflow.PhysicianPortalLogin()[pri:5, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1033)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PhysicianPortalLogin -->
        <test-method status="SKIP" signature="OrderHistoryWorklist()[pri:6, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="OrderHistoryWorklist" duration-ms="0" started-at="2019-07-24T15:59:36Z" description="Verify Tech Only Professional Interpretation Button on Order History Worklist" depends-on-methods="biocept.qa.testcases.CTC_FISHTechOnlyWorkflow.PhysicianPortalLogin" finished-at="2019-07-24T15:59:36Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method CTC_FISHTechOnlyWorkflow.OrderHistoryWorklist()[pri:6, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method CTC_FISHTechOnlyWorkflow.OrderHistoryWorklist()[pri:6, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1033)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OrderHistoryWorklist -->
        <test-method status="SKIP" signature="GoBacktoPhysicianPortalButton()[pri:7, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="GoBacktoPhysicianPortalButton" duration-ms="0" started-at="2019-07-24T15:59:36Z" description="Verify Go Back to Physician Portal Button on Tech Only Professional Interpretation page." depends-on-methods="biocept.qa.testcases.CTC_FISHTechOnlyWorkflow.OrderHistoryWorklist" finished-at="2019-07-24T15:59:36Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method CTC_FISHTechOnlyWorkflow.GoBacktoPhysicianPortalButton()[pri:7, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method CTC_FISHTechOnlyWorkflow.GoBacktoPhysicianPortalButton()[pri:7, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1033)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GoBacktoPhysicianPortalButton -->
        <test-method status="SKIP" signature="SignoffReportFromPhysicianPortal()[pri:8, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="SignoffReportFromPhysicianPortal" duration-ms="1" started-at="2019-07-24T15:59:36Z" description="Verify user is able to signoff the report from Physician Portal." depends-on-methods="biocept.qa.testcases.CTC_FISHTechOnlyWorkflow.GoBacktoPhysicianPortalButton" finished-at="2019-07-24T15:59:36Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method CTC_FISHTechOnlyWorkflow.SignoffReportFromPhysicianPortal()[pri:8, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method CTC_FISHTechOnlyWorkflow.SignoffReportFromPhysicianPortal()[pri:8, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3] depends on not successfully finished methods
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1033)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SignoffReportFromPhysicianPortal -->
        <test-method status="FAIL" signature="LogOut()[pri:0, instance:biocept.qa.testcases.CTC_FISHTechOnlyWorkflow@7c29daf3]" name="LogOut" is-config="true" duration-ms="0" started-at="2019-07-24T15:59:36Z" finished-at="2019-07-24T15:59:36Z">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"id","selector":"welcomename"}
  (Session info: chrome=75.0.3770.142)
  (Driver info: chromedriver=74.0.3729.6 (255758eccf3d244491b8a1317aa76e1ce10d57e9-refs/branch-heads/3729@{#29}),platform=Windows NT 10.0.16299 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:48'
System info: host: 'ANMOLSINGH', ip: '10.60.1.128', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_161'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 74.0.3729.6 (255758eccf3d24..., userDataDir: C:\Users\ANMOL~1.SIN\AppDat...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:56156}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, proxy: Proxy(), rotatable: false, setWindowRect: true, strictFileInteractability: false, takesHeapSnapshot: true, takesScreenshot: true, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unexpectedAlertBehaviour: ignore, unhandledPromptBehavior: ignore, version: 75.0.3770.142, webStorageEnabled: true}
Session ID: 75c9ef874d8f7b9077b324a7f7565d41
*** Element info: {Using=id, value=welcomename}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"id","selector":"welcomename"}
  (Session info: chrome=75.0.3770.142)
  (Driver info: chromedriver=74.0.3729.6 (255758eccf3d244491b8a1317aa76e1ce10d57e9-refs/branch-heads/3729@{#29}),platform=Windows NT 10.0.16299 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:48'
System info: host: 'ANMOLSINGH', ip: '10.60.1.128', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_161'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 74.0.3729.6 (255758eccf3d24..., userDataDir: C:\Users\ANMOL~1.SIN\AppDat...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:56156}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, proxy: Proxy(), rotatable: false, setWindowRect: true, strictFileInteractability: false, takesHeapSnapshot: true, takesScreenshot: true, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unexpectedAlertBehaviour: ignore, unhandledPromptBehavior: ignore, version: 75.0.3770.142, webStorageEnabled: true}
Session ID: 75c9ef874d8f7b9077b324a7f7565d41
*** Element info: {Using=id, value=welcomename}
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
	at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
	at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
	at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
	at org.openqa.selenium.remote.RemoteWebDriver.findElementById(RemoteWebDriver.java:372)
	at org.openqa.selenium.By$ById.findElement(By.java:188)
	at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
	at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
	at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
	at com.sun.proxy.$Proxy13.getWrappedElement(Unknown Source)
	at org.openqa.selenium.remote.internal.WebElementToJsonConverter.apply(WebElementToJsonConverter.java:50)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)
	at org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:484)
	at biocept.qa.pages.LoginAndLogOut.ClientPortalLogOut(LoginAndLogOut.java:67)
	at biocept.qa.testcases.CTC_FISHTechOnlyWorkflow.LogOut(CTC_FISHTechOnlyWorkflow.java:330)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:510)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:211)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:220)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1191)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1116)
	at org.testng.TestNG.run(TestNG.java:1024)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:126)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:137)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:58)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LogOut -->
      </class> <!-- biocept.qa.testcases.CTC_FISHTechOnlyWorkflow -->
      <class name="biocept.qa.testcases.BioceptTestBase">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:biocept.qa.testcases.BioceptTestBase@6ddf90b0]" name="beforeSuite" is-config="true" duration-ms="243" started-at="2019-07-24T15:46:00Z" finished-at="2019-07-24T15:46:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:biocept.qa.testcases.BioceptTestBase@6ddf90b0]" name="tearDown" is-config="true" duration-ms="727" started-at="2019-07-24T15:59:56Z" finished-at="2019-07-24T15:59:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- biocept.qa.testcases.BioceptTestBase -->
    </test> <!-- CTC-FISH Workflow for Tech Cases -->
  </suite> <!-- Biocept -->
</testng-results>
